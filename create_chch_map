#!/usr/bin/python3

import geopandas as gpd
import pandas as pd
import shapely
import folium
import folium.plugins

# find Christchurch
import geopy.geocoders
loca = geopy.geocoders.Nominatim(country_bias='New Zealand')
chch = loca.geocode('Christchurch')

# make an interactive map of Christchurch
m = folium.Map(location=(chch.latitude, chch.longitude), zoom_start=13, control_scale=True)

def get_schools(boundingbox = None):
   """Return the schools in optional boundingbox we are interested in.

   boundingbox is
      min lat, max lat, min long, max long
      ymin, ymax, xmin, xmax
   """

   # these came from
   # https://catalogue.data.govt.nz/dataset/directory-of-educational-institutions/resource/bdfe0e4c-1554-4701-a8fe-ba1c8e0cc2ce
   schools = pd.read_csv('schooldirectory-28-04-2019-233051.csv')

   # only want to keep some info (knowing the Total number and number
   # of Europeans might be useful in predicting Hoity-toity ness)
   schools = schools[['School_Id', 'Org_Name', 'URL', 'Longitude', 'Latitude', 'Org_Type', 'CoEd_Status', 'Decile', 'Total', 'European']]

   # some schools don't have location, but I have checked these by
   # eye, none of them interest us, so just drop them
   schools = schools[schools.Latitude.notnull()]      

   # since George is going into Intermediate, lets just consider
   # schools that provide education for intermediate and older
   schools = schools.loc[(schools.Org_Type == 'Full Primary') | (schools.Org_Type == 'Intermediate') | (schools.Org_Type.str.startswith('Second'))]

   # we need a location as a proper Point type for cx slicing to work
   schools['geometry'] = [shapely.geometry.Point(x, y) for x, y in zip(schools.Longitude, schools.Latitude)]
   
   schools = gpd.GeoDataFrame(schools)
   schools.crs = {'init' :'epsg:4326'}    # this is basic latitude longitude

   # boundingbox [ymin, ymax, xmin, xmax], but cx slicing takes # [xmin:xmax, ymin:ymax]
   if boundingbox: schools = schools.cx[boundingbox[2]:boundingbox[3], boundingbox[0]:boundingbox[1]]

   # add in a column to indicate if it is a high school (easier than
   # checking Org_Type startswith 'Second')
   schools['high'] = schools.Org_Type.str.startswith('Second')

   # each school needs a marker for showing on the map
   for i, row in schools.iterrows():
      marker = folium.Marker(
         location = [row.Latitude, row.Longitude],
         # high schools get blue buildings, otherwise green I (for intermediate)
         icon = folium.Icon(color='blue', prefix='fa', icon='building') if row.high else folium.Icon(color='green',icon='italic'),
         popup=
            """<a href="{}" target="_blank">{}</a><table><tr><td>Type</td><td>{}</td>
               <tr><td>CoEd?</td><td>{}</td>
               <tr><td>Decile</td><td>{}</td>
               <tr><td>#&nbsp;Students</td><td>{}</td>
               <tr><td>#&nbsp;European&nbsp;</td><td>{}</td></table>""".format(row.URL if pd.notnull(row.URL) else '', row.Org_Name.replace(' ', '&nbsp;'), row.Org_Type.replace(' ', '&nbsp;'), 'Y' if row.CoEd_Status == 'Co-Educational' else 'N', row.Decile, row.Total, row.European)
         )
      schools.at[i, 'marker'] = marker

   # some schools have zones, lets put those in for those that do.
   # Got the zone info from https://koordinates.com/layer/743-nz-school-zones-sept-2010/?ex=1
   zones = gpd.read_file('school_zones/nz-school-zones-sept-2010.shp')
   zones = zones.to_crs(epsg=4326)  # basic lat/lon, everything else is in this
   
   # merge with schools.  Do a left merge so every school is retained,
   # with optional zone info
   schools = schools.merge(zones[['SchoolID', 'geometry']], how='left', left_on = 'School_Id', right_on = 'SchoolID')
   schools.drop(columns='SchoolID', inplace=True)
   schools.rename(columns={'geometry_y': 'zone'}, inplace=True)
   
   # the zone is a shapely polygon, for mapping with need a folium
   # polygon
   for i, row in schools.iterrows():
      if pd.notnull(row.zone):
         latlons = [(i[1], i[0]) for i in shapely.geometry.mapping(row.zone)['coordinates'][0]]
         schools.at[i, 'zonepoly'] = folium.vector_layers.Polygon(latlons)

   return schools

# get the schools we are interested in
schools = get_schools([float(i) for i in chch.raw['boundingbox']])

# add school markers to correct group
prim_group = folium.FeatureGroup("Full primary and intermediate schools")
high_group = folium.FeatureGroup("High schools")
for i, row in schools.iterrows():
   (high_group if row.high else prim_group).add_child(row.marker)

# add the zonepoly's to the map
for i, row in schools.iterrows():
   if pd.notnull(row.zonepoly): row.zonepoly.add_to(m)

# add the rest
m.add_child(prim_group)
m.add_child(high_group)
m.add_child(folium.plugins.MeasureControl(primary_length_unit='kilometers', primary_area_unit='hectares'))
folium.LayerControl().add_to(m)

# add the custom leaflet javascript code so when a marker is clicked
# the zonepoly gets shown
from branca.element import Element
e = []
for i, row in schools.iterrows():
   if pd.isnull(row.zone): continue
   e.append(
"""{2}.remove();
   {1}.on('click', (function(event) {{
    if({0}.hasLayer({2})) {{
        {0}.removeLayer({2});
    }} else {{
        {0}.addLayer({2});
   }}
}}));""".format(m.get_name(), row.marker.get_name(), row.zonepoly.get_name()))

e = Element("\n".join(e))
html = m.get_root()
html.script.get_root().render()
html.script._children[e.get_name()] = e




# write it out 
m.save('docs/chch.html')

